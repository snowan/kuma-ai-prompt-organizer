# A generic, single database configuration.

[alembic]
# path to migration scripts
script_location = alembic

# template used to generate migration files
# file_template = %%(rev)s_%%(slug)s

# sys.path path, will be prepended to sys.path if present.
# defaults to the current working directory.
prepend_sys_path = .

# timezone to use when rendering the date within the migration file
# as well as the filename.
# If specified, requires the python-dateutil library that can be
# installed by adding --with-timezone to the [alembic] section
# of setup.cfg.
# string value is passed to dateutil.tz.gettz()
# leave blank for localtime
timezone = UTC

# max length of characters to apply to the
# "slug" field
# truncate_slug_length = 40

# set to 'true' to run the environment during
# the 'revision' command, regardless of autogenerate
# revision_environment = false

# set to 'true' to allow .pyc and .pyo files without
# a source .py file to be detected as revisions in the
# versions/ directory
# sourceless = false

# version location specification; This defaults
# to alembic/versions.  When using multiple version
# directories, initial revisions must be specified with --version-path.
# The path separator used here should be the separator specified by "version_path_separator" below.
# version_locations = %(here)s/bar:%(here)s/bat:alembic/versions

# version path separator; As mentioned above, this is the character used to split
# version_locations. The default within new alembic.ini files is "os", which uses os.pathsep.
# If this key is omitted entirely, it falls back to the legacy behavior of splitting on spaces and/or commas.
# Valid values for version_path_separator are:
#
# version_path_separator = :
# Alternate separator to split version_locations. The default for new projects is the "os" separator.
# version_path_separator = os
# Use `os.pathsep` to split on the path separator specific to the operating system alembic is being run on.
# This allows for multiple relative or absolute paths (using ; or : as separators, e.g. unix or windows).
# This is the default configuration used in new projects.
# version_path_separator = space
# Split the version_locations string on spaces. This is the default for existing projects for backwards compatibility.
# version_path_separator = both
# A combination of space and the "os" separator. Both ":" and " " are treated as separators, e.g. to support both windows and unix paths in the same string.
# version_path_separator = /
# Use a forward slash as the separator. This is useful for URLs or to prevent issues with paths containing spaces or colons.
# version_path_separator = ;
# Use a semicolon as the separator. This is useful for Windows paths.
# version_path_separator = ,
# Use a comma as the separator. This is useful for backwards compatibility with old alembic versions.
# version_path_separator = None
# Disable version location splitting. With this setting, version_locations cannot contain multiple paths.

# the output encoding used when revision files
# are written from script.py.mako
# output_encoding = utf-8

sqlalchemy.url = sqlite+aiosqlite:///./sql_app.db

[post_write_hooks]
# post_write_hooks defines scripts or Python functions that are run
# on newly generated revision scripts.  See the documentation for further
# detail and examples

# format using "black" - use the console_scripts runner, against the "black" entrypoint
# hooks=black
# black.type=console_scripts
# black.entrypoint=black
# black.options=-l 79

# lint with attempts to fix using autopep8
# hooks=autopep8
# autopep8.type=console_scripts
# autopep8.entrypoint=autopep8
# autopep8.options=--in-place --max-line-length=79

# lint with no fixes
# hooks=flake8
# flake8.type=console_scripts
# flake8.entrypoint=flake8
# flake8.options=--max-line-length=79

# format using "ruff" - use the console_scripts runner, against the "ruff" entrypoint
# hooks=ruff
# ruff.type=console_scripts
# ruff.entrypoint=ruff
# ruff.options=--fix --exit-zero --unsafe-fixes --quiet --line-length=79

# format using "ruff format" - use the console_scripts runner, against the "ruff" entrypoint
# hooks=ruff-format
# ruff-format.type=console_scripts
# ruff-format.entrypoint=ruff
# ruff-format.options=format --exit-zero --line-length=79 --quiet

[loggers]
keys = root,sqlalchemy,alembic

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = WARN
handlers = console
qualname =

[logger_sqlalchemy]
level = WARN
handlers =
qualname = sqlalchemy.engine

[logger_alembic]
level = INFO
handlers =
qualname = alembic

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(levelname)-5.5s [%(name)s] %(message)s
datefmt = %H:%M:%S
